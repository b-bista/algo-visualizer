{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","arrayField","setArrayField","i","j","indices","setIndices","className","style","textAlign","width","type","value","onChange","e","event","field","target","array","replace","split","map","num","parseInt","handleChange","onClick","preventDefault","arr","length","temp","console","log","nextItr","prevItr","item","idx","color","backgroundColor","marginRight","height","float","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NA+HeA,MA7Hf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGiBJ,mBAAS,CACrCK,EAAG,EACHC,EAAG,IALQ,mBAGNC,EAHM,KAGGC,EAHH,KAqFb,OACE,sBAAKC,UAAU,MAAMC,MAAO,CAACC,UAAW,SAAUC,MAAO,QAAzD,UACE,6CACA,8BACE,iCACE,iFAEE,uBAAOC,KAAK,OAAOC,MAAOX,EAC1BY,SACE,SAACC,IAtFQ,SAACC,GAEpB,IAAIC,EAAQD,EAAME,OAAOL,MACzBV,EAAcc,GAGd,IAAIE,EAAQF,EAAMG,QAAQ,MAAO,IAAIC,MAAM,KAC3CF,EAAQA,EAAMG,KAAI,SAAAC,GAAG,OAAIC,SAASD,MAClCtB,EAAQkB,GACRZ,EAAW,CAACH,EAAE,EAAGC,EAAE,IA8EPoB,CAAaV,SAGnB,wBAAQW,QAAS,SAACX,GAChBA,EAAEY,iBA9EI,WAEd,IAAIC,EAAG,YAAO5B,GAEVI,EAAIE,EAAQF,EACZC,EAAIC,EAAQD,EAGhB,GAAID,EAAIwB,EAAIC,OAGV,GAAIxB,EAAIuB,EAAIC,OAASzB,EAAI,EAAE,CAEzB,GAAIwB,EAAIvB,GAAKuB,EAAIvB,EAAE,GAAI,CACrB,IAAIyB,EAAOF,EAAIvB,GACfuB,EAAIvB,GAAKuB,EAAIvB,EAAE,GACfuB,EAAIvB,EAAE,GAAKyB,EACX7B,EAAQ2B,GAEVrB,EAAW,CAACH,IAAGC,EAAEA,EAAE,SAInBE,EAAW,CAACH,EAAEA,EAAE,EAAGC,EAAG,SAIxB0B,QAAQC,IAAI,QAoDNC,IAFF,kBAIA,wBAAQP,QAAS,SAACX,GAChBA,EAAEY,iBAlDI,WAEd,IAAIC,EAAG,YAAO5B,GAEVI,EAAIE,EAAQF,EACZC,EAAIC,EAAQD,EAGhB,GAAID,GAAK,EAGP,GAAIC,EAAIuB,EAAIC,OAASzB,EAAI,EAAE,CAEzB,GAAIwB,EAAIvB,GAAKuB,EAAIvB,EAAE,GAAI,CACrB,IAAIyB,EAAOF,EAAIvB,GACfuB,EAAIvB,GAAKuB,EAAIvB,EAAE,GACfuB,EAAIvB,EAAE,GAAKyB,EACX7B,EAAQ2B,GAEVrB,EAAW,CAACH,IAAGC,EAAEA,EAAE,SAInBE,EAAW,CAACH,EAAEA,EAAE,EAAGC,EAAG,SAIxB0B,QAAQC,IAAI,QAwBNE,IAFF,uBAMJ,8BAEElC,EAAKsB,KAAI,SAACa,EAAMC,GACd,GAAID,EAAM,CACR,IAAIE,EAASD,IAAQ9B,EAAQD,GAAK+B,IAAQ9B,EAAQD,EAAE,EAAK,QAAU,OAGnE,OAFI+B,EAAMpC,EAAK6B,OAASvB,EAAQF,EAAI,IAAGiC,EAAQ,OAExC,qBAAK5B,MAAO,CAAC6B,gBAAiBD,EAAO1B,MAAO,OAAQ4B,YAAa,OAAQC,OAAO,GAAD,OAAU,GAALL,EAAL,MAAkBM,MAAO,QAAxG,SAAkHN,cCzGtHO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b17f12e5.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [arrayField, setArrayField] = useState('');\n  const [indices, setIndices] = useState({\n    i: 0,\n    j: 0,\n  });\n\n  const handleChange = (event) => {\n    //controls input field\n    let field = event.target.value\n    setArrayField(field);\n\n    //converts input field to array\n    let array = field.replace(/\\s/g, '').split(',');\n    array = array.map(num => parseInt(num));\n    setData(array);\n    setIndices({i:0, j:0});\n  }\n\n\n  const nextItr = () => {\n\n    let arr = [...data];\n\n    let i = indices.i;\n    let j = indices.j;\n\n    //check i\n    if (i < arr.length){\n      \n      //check j\n      if (j < arr.length - i - 1){\n        //if greater, swap\n        if (arr[j] > arr[j+1]) {\n          let temp = arr[j];\n          arr[j] = arr[j+1];\n          arr[j+1] = temp;\n          setData(arr);\n        }\n        setIndices({i, j:j+1})\n      }\n      //else reset j and increment i\n      else{\n        setIndices({i:i+1, j: 0})\n      }\n    }\n    else {\n      console.log('Done')\n    }\n\n  }\n\n  const prevItr = () => {\n\n    let arr = [...data];\n\n    let i = indices.i;\n    let j = indices.j;\n\n    //check i\n    if (i >= 0){\n      \n      //check j\n      if (j > arr.length - i - 1){\n        //if greater, swap\n        if (arr[j] > arr[j-1]) {\n          let temp = arr[j];\n          arr[j] = arr[j-1];\n          arr[j-1] = temp;\n          setData(arr);\n        }\n        setIndices({i, j:j-1})\n      }\n      //else reset j and increment i\n      else{\n        setIndices({i:i-1, j: 0})\n      }\n    }\n    else {\n      console.log('Done')\n    }\n\n  }\n\n  return (\n    <div className=\"App\" style={{textAlign: 'center', width: 'auto'}}>\n      <h1>Bubble Sort</h1>\n      <div>\n        <form>\n          <label>\n            Enter values to sort (separate with commas):\n            <input type=\"text\" value={arrayField} \n            onChange={\n              (e) => {\n                handleChange(e);\n              }} />\n          </label>\n          <button onClick={(e)=>{\n            e.preventDefault();\n            nextItr();\n          }}>Next</button>\n          <button onClick={(e)=>{\n            e.preventDefault();\n            prevItr();\n          }}>Prev</button>\n        </form>\n      </div>\n      <div>\n      {\n        data.map((item, idx) => {\n          if (item) {\n            let color = (idx === indices.j || idx === indices.j+1) ? 'green' : 'grey';\n            if (idx > data.length - indices.i - 1) color = 'red';\n\n            return <div style={{backgroundColor: color, width: '30px', marginRight: '10px', height: `${item*10}px`, float: 'left'}}>{item}</div>\n          }\n        })\n      }\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}