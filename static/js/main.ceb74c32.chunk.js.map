{"version":3,"sources":["components/BubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["BubbleSort","useState","data","setData","arrayField","setArrayField","i","j","indices","setIndices","type","value","onChange","e","event","field","target","array","replace","split","map","num","parseFloat","handleChange","onClick","preventDefault","arr","length","temp","nextItr","prevItr","item","idx","color","style","backgroundColor","width","marginRight","height","float","App","algo","setAlgo","CurrComponent","className","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ceb74c32.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\nimport React from 'react'\n\nexport default function BubbleSort() {\n    const [data, setData] = useState([]);\n    const [arrayField, setArrayField] = useState('');\n    const [indices, setIndices] = useState({\n        i: 0,\n        j: 0,\n    });\n\n    const handleChange = (event) => {\n        //controls input field\n        let field = event.target.value\n        setArrayField(field);\n\n        //converts input field to array\n        let array = field.replace(/\\s/g, '').split(',');\n        array = array.map(num => parseFloat(num));\n        setData(array);\n        setIndices({i:0, j:0});\n    }\n    \n    const firstItr = () => {\n        \n    }\n    \n    const prevItr = () => {\n\n    let arr = [...data];\n\n    let i = indices.i;\n    let j = indices.j;\n\n    //check i\n    if (i >= 0){\n        if (i == 0 && j == 0) return\n        \n        //check j\n        if (j > 0){\n        //if greater, swap\n        if (arr[j] > arr[j-1]) {\n            let temp = arr[j];\n            arr[j] = arr[j-1];\n            arr[j-1] = temp;\n            setData(arr);\n        }\n        setIndices({i, j:j-1})\n        }\n        //else reset j and increment i\n        else{\n        setIndices({i:i-1, j: arr.length-i})\n        }\n    }\n    else \n        return\n    }\n\n    const nextItr = () => {\n\n        let arr = [...data];\n    \n        let i = indices.i;\n        let j = indices.j;\n    \n        //check i\n        if (i < arr.length){\n          \n          //check j\n          if (j < arr.length - i - 1){\n            //if greater, swap\n            if (arr[j] > arr[j+1]) {\n              let temp = arr[j];\n              arr[j] = arr[j+1];\n              arr[j+1] = temp;\n              setData(arr);\n            }\n            setIndices({i, j:j+1})\n          }\n          //else reset j and increment i\n          else{\n            setIndices({i:i+1, j: 0})\n          }\n        }\n        else \n          return\n        \n    \n    }\n\n    const lastItr = () => {\n\n    }\n\n\n    return (\n    <div>\n        <h1>Bubble Sort</h1>\n        <div>\n        <form>\n            <label>\n            Enter values to sort (separate with commas):\n            <input type=\"text\" value={arrayField} \n            onChange={\n                (e) => {\n                handleChange(e);\n                }} />\n            </label>\n            <button onClick={(e)=>{\n            e.preventDefault();\n            nextItr();\n            }}>Next</button>\n            <button onClick={(e)=>{\n            e.preventDefault();\n            prevItr();\n            }}>Prev</button>\n        </form>\n        </div>\n        <div>\n        {\n        data.map((item, idx) => {\n            if (item) {\n            let color = (idx === indices.j || idx === indices.j+1) ? 'green' : 'grey';\n            if (idx > data.length - indices.i - 1) color = 'red';\n\n            return <div style={{backgroundColor: color, width: '30px', marginRight: '10px', height: `${item*10}px`, float: 'left'}}>{item}</div>\n            }\n        })\n        }\n        </div>\n        \n    </div>\n    );\n}\n","import {useState} from 'react'\nimport BubbleSort from './components/BubbleSort'\n\nfunction App() {\n  const [algo, setAlgo] = useState('bubbleSort');\n\n  const handleChange = (event) => {\n    setAlgo(event.target.value);\n  }\n\n  const components = {\n    'bubbleSort': BubbleSort\n  }\n\n  const CurrComponent = components[algo];\n\n  return (\n    <div className=\"App\" style={{textAlign: 'center', width: 'auto'}}>\n       {\n         <form>\n         <label>\n           Pick your Algorithm:\n           <select value={algo} onChange={handleChange}>\n             <option value=\"bubbleSort\">BubbleSort</option>\n             <option value=\"quickSort\">QuickSort</option>\n             <option value=\"mergeSort\">MergeSort</option>\n             <option value=\"selectionSort\">SelectionSort</option>\n           </select>\n         </label>\n       </form>\n       }\n       < CurrComponent />\n    </div>\n  )\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}